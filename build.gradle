buildscript {
	ext {
		kotlinVersion = '1.2.20'
		springBootVersion = '1.5.13.RELEASE'
        gradleDockerVersion = '0.19.2'
        buildScanVersion = '1.13.2'
        gradlePythonPluginVersion = '1.0.2'
        gradleMkdocsPluginVersion = '1.0.1'
        actionsOnGoogleVersion = '1.7.0'
	}
	repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${gradleDockerVersion}")
        classpath "com.gradle:build-scan-plugin:${buildScanVersion}"
        classpath("ru.vyarus:gradle-use-python-plugin:${gradlePythonPluginVersion}")
        classpath("ru.vyarus:gradle-mkdocs-plugin:${gradleMkdocsPluginVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "com.palantir.docker"
apply plugin: 'ru.vyarus.use-python'
apply plugin: 'ru.vyarus.mkdocs'

apply plugin: 'com.gradle.build-scan'

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}


group = 'io.saagie'
version = "1.1.$System.env.TRAVIS_BUILD_NUMBER"
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
    jcenter()
}


ext.jacksonModuleVersion="2.9.4.1"
ext.jbotVersion="3.0.2"
ext.swaggerVersion="2.8.0"
ext.kluentVersion="1.35"
ext.mockitoVersion="1.5.0"

dependencies {
    compile ("com.google.actions:actions-on-google:${actionsOnGoogleVersion}")
	compile('org.springframework.boot:spring-boot-starter')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonModuleVersion}")
    compile("me.ramswaroop.jbot:jbot:${jbotVersion}")
    compile 'com.google.api-client:google-api-client:1.25.0'



    testCompile("org.springframework.boot:spring-boot-starter-test")
	testCompile("org.springframework.security:spring-security-test")
	testCompile("org.amshove.kluent:kluent:${kluentVersion}")
	testCompile("com.nhaarman:mockito-kotlin-kt1.1:${mockitoVersion}")
	testCompile("org.jetbrains.kotlin:kotlin-test:${kotlinVersion}")
}

docker {
    name "saagie/${jar.baseName}:${version}"
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
}

mkdocs.publish {
    docPath = 'site'
    rootRedirect = false
}

mkdocs {
    sourcesDir = 'src/main/guide'
    buildDir= 'src/main/resources/static/guide'
}
